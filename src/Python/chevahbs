#!/usr/bin/env bash
#
# Chevah Build Script for Python.
#


# Import shared code.
# The relative paths work in both src/blabla and build/blabla.
source ../../functions.sh
source ../../functions_build.sh
source ../../BUILD_ENV_ARRAYS


chevahbs_getsources() {
    local name="$1"
    local ver="$2"
    local ext="tgz"
    local dir
    local link

    # For beta versions, remove everything after the b for the dir name.
    dir=${ver%%b*}
    # For rc versions, remove everything after rc for the dir name.
    dir=${ver%%rc*}
    link=https://www.python.org/ftp/python/"$dir"/"$name"-"$ver"."$ext"

    download_sources "$name" "$ver" "$link" "$ext"
}


chevahbs_patch() {
    if [ "$BUILD_LIBEDIT" = "yes" ]; then
        # Adapted from https://bugs.python.org/issue13501.
        echo "# Applying readline_libedit.patch... #"
        execute patch -p 1 < readline_libedit.patch
    fi
}


chevahbs_configure() {
    # To properly quote multiple options, this is a Bash array.
    CONFIG_OPTS=(--disable-shared)

    # This requires the patch referenced in chevahbs_patch().
    if [ "$BUILD_LIBEDIT" = "yes" ]; then
        CONFIG_OPTS=("${CONFIG_OPTS[@]}" --with-readline=editline)
    fi

    echo "# Copying collected header files among Python's ones... #"
    execute cp -r "$INSTALL_DIR"/include/* ./Include/

    # Copying headers to Include/ is not enough to find the OpenSSL ones.
    if [ "$BUILD_OPENSSL" = "yes" ]; then
        CONFIG_OPTS=("${CONFIG_OPTS[@]}" --with-openssl="$INSTALL_DIR")
    fi

    case "$OS" in
        linux)
            # Needed for building Python 3.11's sqlite3 module on Linux.
            # Note that this is not needed on Alpine.
            LDFLAGS="$LDFLAGS -lm"
            ;;
        linux_musl)
            # Needed for Alpine Linux 3.20.
            LDFLAGS="$LDFLAGS -lffi"
            ;;
        fbsd*|sol11*)
            LDFLAGS="$LDFLAGS -lncurses"
            ;;
        obsd*)
            # In OpenBSD 6.1 and newer, Python binary has to marked as
            # "wxneeded" because it breaks the mandatory W^X protection.
            LDFLAGS="$LDFLAGS -Wl,-z,wxneeded"
            ;;
    esac

    echo "# Patching the git rev id into Python's version string... #"
    execute cp Modules/getbuildinfo.c Modules/getbuildinfo.c.orig
    # Don't use 'sed -i' here, it's not supported on macOS yet (tested on 13.3).
    execute sed -e \
        s/gitid\ =\ \"main\"/gitid\ =\ \""$PYTHIA_VERSION"\"/g \
        Modules/getbuildinfo.c.orig > Modules/getbuildinfo.c
    execute ./configure --prefix="$INSTALL_DIR" "${CONFIG_OPTS[@]}"
}


chevahbs_compile() {
    execute "${MAKE_CMD[@]}"
}

chevahbs_try() {
    if [ "$OS" = "macos" ]; then
        # Extra CA certs needed to pass test_cppext/test_distutils, and included
        # Mac/BuildScript/resources/install_certificates.command fix is broken.
        (>&2 echo -e "\tNot running Python upstream tests on macOS.")
    elif [ "$OS" = "linux_musl" ]; then
        # Locales not supported on Alpine 3.12, failing locale-related tests.
        (>&2 echo -e "\tNot running Python upstream tests on musl-based Linux.")
    else
        execute "${MAKE_CMD[@]}" test
    fi
}


chevahbs_cp() {
    if [ "$OS" = "linux_musl" ]; then
        # EMUTRAMP required for full functionality under a grsec kernel.
        # Don't use "paxmark", file attributes will be lost when tar'ed.
        # Needed with non-grsec kernels as well, otherwise PAM-related
        # compat tests crash with signal 11 (last tested on Alpine 3.12).
        execute paxctl -cE python
    fi

    execute "${MAKE_CMD[@]}" install
}


select_chevahbs_command "$@"
