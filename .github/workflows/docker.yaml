#
# GitHub actions for building and testing.
#
# For best support, use `-latest` for runners spinning up containers. More at
# https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners.

name: Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Set to 'yes' to open a tunnel to GitHub's VMs through tmate on failures.
# Also increase timeout-minutes for the relevant OS when debugging remotely.
env:
  CHEVAH_DEBUG: 'yes'

# Using a job name that doesn't contain the OS name, to minimize the risk of
# confusion with the OS names of the containers, which are the relevant ones.
jobs:
  latest:
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container: [ 'alpine:3.12', 'astj/centos5-vault' ]
    timeout-minutes: 60
    steps:

    # To avoid duplicating the other steps, setup steps are allowed to fail.
    # First 'run' command should only run successfully on the intended target.
    - name: Alpine setup
      continue-on-error: true
      run: |
        apk add git bash curl openssh-client rust cargo
        curl -o /usr/local/bin/paxctl https://binary.chevah.com/third-party-stuff/alpine/paxctl-3.12
        chmod +x /usr/local/bin/paxctl

    # To avoid duplicating the other steps, setup steps are allowed to fail.
    # First 'run' command should only run successfully on the intended target.
    - name: CentOS 5 setup
      continue-on-error: true
      run: |
        rpm -i http://www.tuxad.de/rpms/tuxad-release-5-1.noarch.rpm
        yum makecache
        yum -y install curl openssh-clients gcc44 make m4 patch unzip wget
        ln -s /usr/bin/gcc44 /usr/local/bin/gcc
        wget --mirror --no-parent https://binary.chevah.com/third-party-stuff/centos5/endpoint/
        cd binary.chevah.com/third-party-stuff/centos5/endpoint/
        rpm -i local-perl-*.rpm
        rpm -i --nodeps git{-core,}-2.5.0-1.ep.x86_64.rpm

    - name: Clone repo independently
      run: |
        git clone https://github.com/chevah/pythia.git
        cd pythia
        git checkout ${GITHUB_HEAD_REF}

    - name: Build Pythia
      run: |
        cd pythia
        ./pythia build

    - name: Test Pythia
      run: |
        cd pythia
        ./pythia test

    # Using `~/` is problematic under Docker, use `/root/`.
    - name: Upload testing package
      run: |
        mkdir -pv /root/.ssh/
        cd pythia
        touch priv_key
        chmod 600 priv_key
        echo "${{ secrets.SFTPPLUS_BIN_PRIV_KEY }}" > priv_key
        echo "${{ secrets.SFTPPLUS_BIN_HOST_KEY }}" > /root/.ssh/known_hosts
        ./publish_dist.sh
        rm priv_key

    # Still not working.
    - name: Prepare tmate debug
      if: failure() && env.CHEVAH_DEBUG == 'yes'
      run: ln -s /bin/true /usr/bin/apt-get && sleep 3 && which apt-get

    # If one of the above steps fails, fire up tmate for remote debugging.
    - name: Tmate debug on failure
      if: failure() && env.CHEVAH_DEBUG == 'yes'
      uses: mxschmitt/action-tmate@v3
      with:
        sudo: false
        limit-access-to-actor: true
