#
# GitHub actions for building and testing.
#
# For best support, use `-latest` for runners spinning up containers. More at
# https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners.

name: GitHub-CI-Containerized

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Set to 'yes' to open a tunnel to GitHub's VMs through tmate on failures.
# Also increase timeout-minutes for the relevant OS when debugging remotely.
env:
  CHEVAH_DEBUG: 'yes'


jobs:
  lnx:
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container: [ "alpine:3.12", "astj/centos5-vault" ]
    timeout-minutes: 60
    steps:

    - name: Prepare setup
      run: ./ci_docker_setup.sh

    - name: Clone repo independently
      run: |
        git clone https://github.com/chevah/pythia.git
        cd pythia
        git checkout ${GITHUB_HEAD_REF}

    - name: Build Python
      run: |
        cd pythia
        ./pythia build

    - name: Test Python
      run: |
        cd pythia
        ./pythia test

    # Using `~/` is problematic under Docker, use `/root/`.
    - name: Upload testing package
      run: |
        mkdir -pv /root/.ssh/
        cd pythia
        touch priv_key
        chmod 600 priv_key
        echo "${{ secrets.SFTPPLUS_BIN_PRIV_KEY }}" > priv_key
        echo "${{ secrets.SFTPPLUS_BIN_HOST_KEY }}" > /root/.ssh/known_hosts
        ./publish_dist.sh
        rm priv_key

    # Still not working.
    - name: Prepare tmate debug
      if: failure() && env.CHEVAH_DEBUG == 'yes'
      run: ln -s /bin/true /usr/bin/apt-get && sleep 3 && which apt-get

    # If one of the above steps fails, fire up tmate for remote debugging.
    - name: Tmate debug on failure
      if: failure() && env.CHEVAH_DEBUG == 'yes'
      uses: mxschmitt/action-tmate@v3
      with:
        sudo: false
        limit-access-to-actor: true
